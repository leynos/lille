name: CI

on:
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      CARGO_TERM_COLOR: always
      CS_ACCESS_TOKEN: ${{ secrets.CS_ACCESS_TOKEN }}
      CODESCENE_CLI_SHA256: ${{ vars.CODESCENE_CLI_SHA256 }}
      BUILD_PROFILE: debug
    steps:
      - uses: actions/checkout@v4
      - name: Extract DDlog version
        id: ddlog-version
        run: |
          set -euo pipefail
          version=$(grep -E -o 'v[0-9]+\.[0-9]+\.[0-9]+' scripts/install_ddlog.sh | head -n1)
          if [ -z "$version" ]; then
            echo "Failed to detect DDlog version" >&2
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Install rust
        uses: actions-rust-lang/setup-rust-toolchain@9d7e65c320fdb52dcd45ffaa68deb6c02c8754d9
        with:
          override: true
          components: rustfmt, clippy
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/${{ env.BUILD_PROFILE }}
          key: ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ env.BUILD_PROFILE }}-
      - name: Restore DDlog cache
        id: ddlog-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.local/ddlog
          key: ${{ runner.os }}-ddlog-${{ steps.ddlog-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-ddlog-
      - name: Install DDlog
        run: |
          ./scripts/install_ddlog.sh
          ls -l /home/runner/.local/ddlog
          echo dotenv:
          cat .env
      - name: Save DDlog cache
        if: steps.ddlog-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/.local/ddlog
          key: ${{ runner.os }}-ddlog-${{ steps.ddlog-version.outputs.version }}
      - name: Format
        run: cargo fmt --all -- --check
      - name: Lint
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Test
        run: cargo test
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Run coverage
        run: cargo tarpaulin --out lcov
      - name: Install CodeScene coverage tool
        if: env.CS_ACCESS_TOKEN
        run: |
          set -euo pipefail
          curl -fsSL -o install-cs-coverage-tool.sh https://downloads.codescene.io/enterprise/cli/install-cs-coverage-tool.sh
          if [ -n "${CODESCENE_CLI_SHA256:-}" ]; then
            echo "${CODESCENE_CLI_SHA256}  install-cs-coverage-tool.sh" | sha256sum -c -
          fi
          bash install-cs-coverage-tool.sh -y
          rm install-cs-coverage-tool.sh
      - name: Upload coverage data to CodeScene
        if: env.CS_ACCESS_TOKEN
        run: cs-coverage upload --format "lcov" --metric "line-coverage" "lcov.info"





